============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.1.3, pluggy-1.0.0 -- /home/albina/Dev/django_sprint4/venv/bin/python3
django: settings: blogicum.settings (from ini)
rootdir: /home/albina/Dev/django_sprint4, configfile: pytest.ini, testpaths: tests/
plugins: Faker-12.0.1, django-4.5.2
collecting ... collected 25 items

tests/test_content.py::TestContent::test_unpublished PASSED              [  4%]
tests/test_content.py::TestContent::test_only_own_pubs_in_category PASSED [  8%]
tests/test_content.py::TestContent::test_only_own_pubs_in_profile PASSED [ 12%]
tests/test_content.py::TestContent::test_unpublished_category PASSED     [ 16%]
tests/test_content.py::TestContent::test_future_posts PASSED             [ 20%]
tests/test_content.py::TestContent::test_pagination PASSED               [ 24%]
tests/test_content.py::TestContent::test_image_visible PASSED            [ 28%]
tests/test_err_pages.py::test_custom_err_handlers PASSED                 [ 32%]
tests/test_users.py::test_custom_err_handlers FAILED                     [ 36%]
tests/test_users.py::test_profile FAILED                                 [ 40%]
tests/test_comment.py::test_comment_created_at PASSED                    [ 44%]
tests/test_comment.py::test_comment PASSED                               [ 48%]
tests/test_comment.py::test_404_on_comment_deleted_post PASSED           [ 52%]
tests/test_post.py::test_post_created_at PASSED                          [ 56%]
tests/test_post.py::test_post FAILED                                     [ 60%]
tests/test_comment.py::TestCommentModelAttrs::test_model_attrs[`post` field] <- tests/conftest.py PASSED [ 64%]
tests/test_comment.py::TestCommentModelAttrs::test_model_attrs[`author` field] <- tests/conftest.py PASSED [ 68%]
tests/test_comment.py::TestCommentModelAttrs::test_model_attrs[`text` field] <- tests/conftest.py PASSED [ 72%]
tests/test_comment.py::TestCommentModelAttrs::test_model_attrs[`created_at` field] <- tests/conftest.py PASSED [ 76%]
tests/test_emails.py::test_gitignore PASSED                              [ 80%]
tests/test_emails.py::test_email_backend_settings PASSED                 [ 84%]
tests/test_err_pages.py::test_csrf_failure_view PASSED                   [ 88%]
tests/test_post.py::TestPostModelAttrs::test_model_attrs[`image` field] <- tests/conftest.py PASSED [ 92%]
tests/test_post.py::TestPostModelAttrs::test_model_attrs[`pub_date` field] <- tests/conftest.py PASSED [ 96%]
tests/test_static_pages.py::test_static_pages_as_cbv PASSED              [100%]

=================================== FAILURES ===================================
___________________________ test_custom_err_handlers ___________________________

client = <django.test.client.Client object at 0x74e285c3f0a0>

    @pytest.mark.django_db
    def test_custom_err_handlers(client):
        try:
            from blogicum import urls as blogicum_urls
        except Exception:
            raise AssertionError(
                "Убедитесь, в головном файле с маршрутами нет ошибок."
            )
        urls_src_squashed = squash_code(inspect.getsource(blogicum_urls))
        if "django.contrib.auth.urls" not in urls_src_squashed:
            raise AssertionError(
                "Убедитесь, что подключены маршруты для работы с пользователями из"
                " `django.contrib.auth.urls`."
            )
    
        def search_url_patterns(substring):
            resolver = get_resolver()
            results = []
    
            def search_patterns(head, patterns):
                for pattern in patterns:
                    if isinstance(pattern, URLPattern):
                        pattern_as_str = head + str(pattern.pattern)
                        if substring in pattern_as_str:
                            results.append(pattern)
                    elif isinstance(pattern, URLResolver):
                        search_patterns(
                            head + str(pattern.pattern), pattern.url_patterns
                        )
                return results
    
            search_patterns(head="", patterns=resolver.url_patterns)
    
            return results
    
        registration_url = "auth/registration/"
        auth_registration_patterns = search_url_patterns(registration_url)
>       assert auth_registration_patterns, (
            "Убедитесь, что в головном файле с маршрутами переопределён маршрут"
            f" `{registration_url}`."
        )
E       AssertionError: Убедитесь, что в головном файле с маршрутами переопределён маршрут `auth/registration/`.
E       assert []

tests/test_users.py:62: AssertionError
_________________________________ test_profile _________________________________

user = <User: lamberik>, another_user = <User: haynesdave>
user_client = <django.test.client.Client object at 0x74e285c71ea0>
another_user_client = <django.test.client.Client object at 0x74e285c725c0>
unlogged_client = <django.test.client.Client object at 0x74e285c723e0>

    @pytest.mark.django_db
    def test_profile(
            user, another_user, user_client, another_user_client, unlogged_client
    ):
        user_url = f"/profile/{user.username}/"
        printed_url = "/profile/<username>/"
    
        User = get_user_model()
        status_code_not_404_err_msg = (
            "Убедитесь, что при обращении к странице несуществующего "
            "пользователя возвращается статус 404."
        )
        try:
            response = user_client.get("/profile/this_is_unexisting_user_name/")
        except User.DoesNotExist:
            raise AssertionError(status_code_not_404_err_msg)
    
        assert response.status_code == HTTPStatus.NOT_FOUND, (
            status_code_not_404_err_msg)
    
        user_response: HttpResponse = user_client.get(user_url)
    
        user_content = user_response.content.decode("utf-8")
    
        anothers_same_page_response: HttpResponse = another_user_client.get(
            user_url
        )
        anothers_same_page_content = anothers_same_page_response.content.decode(
            "utf-8"
        )
    
        unlogged_same_page_response: HttpResponse = unlogged_client.get(user_url)
        unlogged_same_page_content = unlogged_same_page_response.content.decode(
            "utf-8"
        )
    
        for profile_user, profile_user_content in (
                (user, user_content),
                (user, unlogged_same_page_content),
                (user, anothers_same_page_content),
        ):
            _test_user_info_displayed(
                profile_user, profile_user_content, printed_url
            )
    
        try:
>           edit_url, change_pwd_url = try_get_profile_manage_urls(
                user_content, anothers_same_page_content, ignore_urls={user_url}
            )

tests/test_users.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

user_content = '\n\n<!DOCTYPE html>\n<html lang="ru">\n  <head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width...n    </main>\n    <footer class="border-top text-center py-3">\n  <p>© Блогикум</p>    \n</footer>\n  </body>\n</html>'
anothers_page_content = '\n\n<!DOCTYPE html>\n<html lang="ru">\n  <head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width...n    </main>\n    <footer class="border-top text-center py-3">\n  <p>© Блогикум</p>    \n</footer>\n  </body>\n</html>'
ignore_urls = {'/profile/lamberik/'}

    def try_get_profile_manage_urls(
            user_content: str, anothers_page_content: str, ignore_urls: Set[str]
    ) -> Tuple[str, str]:
        diff_urls = get_extra_urls(
            base_content=anothers_page_content,
            extra_content=user_content,
            ignore_urls=ignore_urls,
        )
        if len(diff_urls) != 2:
            raise ManageProfileLinksException
    
        # swap variables if needed
        edit_url, change_pwd_url = diff_urls
        change_pwd_marker = "/auth/password_change/"
        if change_pwd_marker in edit_url:
            edit_url, change_pwd_url = change_pwd_url, edit_url
        if change_pwd_marker not in change_pwd_url:
>           raise AssertionError(
                "Убедитесь, что на странице профиля владельцу этого профиля"
                f" доступна ссылка `{change_pwd_marker}` для изменения пароля."
            )
E           AssertionError: Убедитесь, что на странице профиля владельцу этого профиля доступна ссылка `/auth/password_change/` для изменения пароля.

tests/test_users.py:210: AssertionError
__________________________________ test_post ___________________________________

published_category = <Category: Whose Senior Suffer Partner Place Mind>
published_location = <Location: Dr. William Roy>
user_client = <django.test.client.Client object at 0x74e285ba5270>
another_user_client = <django.test.client.Client object at 0x74e285ba4970>
unlogged_client = <django.test.client.Client object at 0x74e285ba7d60>
comment_to_a_post = <Comment: Former eat she plan PM listen course. Another practice whole feel.>
create_post_context_form_item = KeyVal(key='form', val=<PostForm bound=False, valid=False, fields=(title;text;pub_date;location;category;image)>)
PostModel = <class 'blog.models.Post'>
CommentModelAdapter = <class 'adapters.comment.CommentModelAdapter.<locals>._CommentModelAdapter'>
main_content_tester = <test_content.MainPostContentTester object at 0x74e285bcab00>

    @pytest.mark.django_db(transaction=True)
    def test_post(
            published_category: Model,
            published_location: Model,
            user_client: django.test.Client,
            another_user_client: django.test.Client,
            unlogged_client: django.test.Client,
            comment_to_a_post: Model,
            create_post_context_form_item: Tuple[str, BaseForm],
            PostModel: Type[Model],
            CommentModelAdapter: CommentModelAdapterT,
            main_content_tester: MainPostContentTester
    ):
        _, ctx_form = create_post_context_form_item
    
        create_a_post_get_response = get_create_a_post_get_response_safely(
            user_client
        )
    
        response_on_created, created_items = _test_create_items(
            PostModel,
            PostModelAdapter,
            another_user_client,
            create_a_post_get_response,
            ctx_form,
            published_category,
            published_location,
            unlogged_client,
            user_client,
        )
    
        # checking images are visible on post creation
        created_content = response_on_created.content.decode('utf-8')
        img_count = created_content.count('<img')
        expected_img_count = main_content_tester.n_or_page_size(len(created_items))
        assert img_count >= expected_img_count, (
            'Убедитесь, что при создании публикации она отображается с картинкой.'
        )
    
>       edit_response, edit_url, del_url = _test_edit_post(
            CommentModelAdapter,
            another_user_client,
            comment_to_a_post,
            unlogged_client=unlogged_client,
            user_client=user_client,
        )

tests/test_post.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_post.py:360: in _test_edit_post
    edit_response = _test_edit(
tests/test_edit.py:58: in _test_edit
    return tester.test_edit_item(
tests/form/post/edit_form_tester.py:126: in test_edit_item
    return super().test_edit_item(updated_form, qs, item_adapter)
tests/form/base_form_tester.py:370: in test_edit_item
    can_edit, _ = self.user_can_edit(
tests/form/base_form_tester.py:427: in user_can_edit
    response = submitter.test_submit(
tests/form/base_form_tester.py:450: in test_submit
    self._test_response_cbk(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

response = <HttpResponseForbidden status_code=403, "text/html">
err_msg = 'Убедитесь, что при отправке формы редактирования поста неавторизованным пользователем он перенаправляется на страницу публикации (/posts/<int:post_id>/).'
assert_status_in = (<HTTPStatus.OK: 200>,), assert_status_not_in = ()
assert_redirect = (UrlRepr(url='/posts/\\d+/$', repr='/posts/<int:post_id>/'), 'страницу публикации')

    @staticmethod
    def test_response_cbk(
        response: HttpResponse,
        err_msg: str,
        assert_status_in: Sequence[int] = tuple(),
        assert_status_not_in: Sequence[int] = tuple(),
        assert_redirect: Optional[Union[TitledUrlRepr, bool]] = None,
    ):
        if assert_status_in and response.status_code not in assert_status_in:
>           raise AssertionError(err_msg)
E           AssertionError: Убедитесь, что при отправке формы редактирования поста неавторизованным пользователем он перенаправляется на страницу публикации (/posts/<int:post_id>/).

tests/form/base_form_tester.py:462: AssertionError
================== 3 failed, 22 passed, 47 warnings in 2.88s ===================
